From 57f0d1e4ff4dd1e1d669699f02485e07125f0a6d Mon Sep 17 00:00:00 2001
From: Valentin Raevsky <valentin@compulab.co.il>
Date: Wed, 17 Aug 2022 14:06:45 +0300
Subject: [PATCH] imx8mp: ddr: Refactoring the ddr discovery logic

Signed-off-by: Valentin Raevsky <valentin@compulab.co.il>
---
 board/compulab/plat/imx8mp/ddr/ddr.c | 96 +++++++++++++++++++++-------
 board/compulab/plat/imx8mp/ddr/ddr.h |  2 +-
 2 files changed, 74 insertions(+), 24 deletions(-)

diff --git a/board/compulab/plat/imx8mp/ddr/ddr.c b/board/compulab/plat/imx8mp/ddr/ddr.c
index daee329f73..82b9d974a2 100644
--- a/board/compulab/plat/imx8mp/ddr/ddr.c
+++ b/board/compulab/plat/imx8mp/ddr/ddr.c
@@ -25,43 +25,68 @@ void reset_misc(void);
 static void do_reset_spl(void) { reset_misc(); }
 
 #define DEFAULT (('D' << 24) + ('E' << 16 ) + ( 'F' << 8 ) + 'A')
+#define VALID 0xCAFECAFE
+#define DDR_INIT_IN  0xCACACACA
+#define DDR_INIT_OUT 0x0C0C0C0C
+
+int cl_eeprom_buffer_write(uint offset, uchar *buf, int len);
+int cl_eeprom_buffer_read(uint offset, uchar *buf, int len);
+
+static inline void lpddr4_data_get(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
+	cl_eeprom_buffer_read(0, (uchar *)lpddr4_tcm_desc, sizeof(struct lpddr4_tcm_desc));
+}
+
+static inline void lpddr4_data_set(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
+	cl_eeprom_buffer_write(0, (uchar *)lpddr4_tcm_desc, sizeof(struct lpddr4_tcm_desc));
+}
 
 static void spl_tcm_init(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
     if (lpddr4_tcm_desc->sign == DEFAULT)
 	    return;
 
+    memset((char *)lpddr4_tcm_desc, 0x0, sizeof(struct lpddr4_tcm_desc));
     lpddr4_tcm_desc->sign = DEFAULT;
-    lpddr4_tcm_desc->index = 0;
 }
 
 static void spl_tcm_fini(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
-    if (lpddr4_tcm_desc->sign != DEFAULT)
+    if (lpddr4_tcm_desc->sign == VALID)
 	    return;
 
-    lpddr4_tcm_desc->sign = ~DEFAULT;
-    lpddr4_tcm_desc->index = 0;
+    memset((char *)lpddr4_tcm_desc, 0x0, sizeof(struct lpddr4_tcm_desc));
+    lpddr4_tcm_desc->sign = VALID;
+}
+
+static void spl_tcm_clr(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
+    memset((char *)lpddr4_tcm_desc, 0xFF, sizeof(struct lpddr4_tcm_desc));
 }
 
 static struct lpddr4_tcm_desc spl_tcm_data;
 #define SPL_TCM_DATA &spl_tcm_data
+#define SPL_TCM_CLR  spl_tcm_clr(lpddr4_tcm_desc)
 #define SPL_TCM_INIT spl_tcm_init(lpddr4_tcm_desc)
 #define SPL_TCM_FINI spl_tcm_fini(lpddr4_tcm_desc)
 
 static int _spl_dram_init(void)
 {
 	unsigned int ddr_info = 0xdeadbeef;
+	unsigned char subind = 0xfF;
 	unsigned int ddr_info_mrr = 0xdeadbeef;
 	unsigned int ddr_found = 0;
 	int i = 0;
 
 	struct lpddr4_tcm_desc *lpddr4_tcm_desc = SPL_TCM_DATA;
 
-	if (lpddr4_tcm_desc->sign != DEFAULT) {
+	if (lpddr4_tcm_desc->sign == VALID) {
 		/* get ddr type from the eeprom if not in tcm scan mode */
 		ddr_info = cl_eeprom_get_ddrinfo();
+		subind = cl_eeprom_get_subind();
+
+		printf("DDRINFO: EEPROM VALID DATA [ [ %x ] = %x %x \n",
+                lpddr4_tcm_desc->sign, ddr_info, subind);
+
 		for ( i = 0; i < ARRAY_SIZE(lpddr4_array); i++ ) {
 			if (lpddr4_array[i].id == ddr_info &&
-			lpddr4_array[i].subind == cl_eeprom_get_subind()) {
+			lpddr4_array[i].subind == subind) {
 				ddr_found = 1;
 				break;
 			}
@@ -76,26 +101,49 @@ static int _spl_dram_init(void)
 
 		SPL_TCM_INIT;
 
+        /* Let's check the latest training status */
+        if (lpddr4_tcm_desc->ddr_init_status == DDR_INIT_IN) {
+            printf("%s Bad attempt %d skip\n",__func__,(lpddr4_tcm_desc->index+1));
+			lpddr4_tcm_desc->index += 1;
+        }
+
 		if (lpddr4_tcm_desc->index < ARRAY_SIZE(lpddr4_array)) {
 			printf("DDRINFO: Cfg attempt: [ %d/%lu ]\n", lpddr4_tcm_desc->index+1, ARRAY_SIZE(lpddr4_array));
 			i = lpddr4_tcm_desc->index;
 			lpddr4_tcm_desc->index += 1;
 		} else {
 			/* Ran out all available ddr setings */
+			SPL_TCM_CLR;
 			printf("DDRINFO: Ran out all [ %lu ] cfg attempts. A non supported configuration.\n", ARRAY_SIZE(lpddr4_array));
-			while ( 1 ) {};
+            return -1;
 		}
+
 		ddr_info = lpddr4_array[i].id;
-	} else
+	}
 
 	printf("DDRINFO(%s): %s %dMB @ %d MHz\n", (ddr_found ? "D" : "?" ), lpddr4_array[i].name,
 			lpddr4_array[i].size, lpddr4_array[i].timing->fsp_table[0]);
 
+
+	if (ddr_found == 0) {
+        /* This is a discovery case, save in ddr_init_status 'cause it can stack */
+        lpddr4_tcm_desc->ddr_init_status = DDR_INIT_IN;
+        /* Save the data before training */
+        lpddr4_data_set(SPL_TCM_DATA);
+    }
+
 	if (ddr_init(lpddr4_array[i].timing)) {
 		SPL_TCM_INIT;
 		return 1;
 	}
 
+	if (ddr_found == 0) {
+        /* This is a discovery case, save out ddr_init_status */
+        lpddr4_tcm_desc->ddr_init_status = DDR_INIT_OUT;
+        /* Save the data after training */
+        lpddr4_data_set(SPL_TCM_DATA);
+    }
+
 	ddr_info_mrr = lpddr4_get_mr();
 	if (ddr_info_mrr == 0xFFFFFFFF ) {
 		printf("DDRINFO(M): mr5-8 [ 0x%x ] is invalid; reset\n", ddr_info_mrr);
@@ -111,7 +159,7 @@ static int _spl_dram_init(void)
 		return 1;
 	}
 
-	SPL_TCM_FINI;
+	lpddr4_tcm_desc->size = lpddr4_array[i].size;
 
 	if (ddr_found == 0) {
 		/* Update eeprom */
@@ -126,23 +174,15 @@ static int _spl_dram_init(void)
 			printf("DDRINFO(EEPROM): make sure that the eeprom is accessible\n");
 			printf("DDRINFO(EEPROM): i2c dev 1; i2c md 0x51 0x40 0x50\n");
 		}
+        /* Set the data valid */
+	    SPL_TCM_FINI;
+        /* Return with 1 in ordert to make the caller save the ddr discovery status */
+	    return 1;
 	}
 
-	lpddr4_tcm_desc->size = lpddr4_array[i].size;
 	return 0;
 }
 
-int cl_eeprom_buffer_write(uint offset, uchar *buf, int len);
-int cl_eeprom_buffer_read(uint offset, uchar *buf, int len);
-
-static inline void lpddr4_data_get(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
-	cl_eeprom_buffer_read(0, (uchar *)lpddr4_tcm_desc, sizeof(struct lpddr4_tcm_desc));
-}
-
-static inline void lpddr4_data_set(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
-	cl_eeprom_buffer_write(0, (uchar *)lpddr4_tcm_desc, sizeof(struct lpddr4_tcm_desc));
-}
-
 static inline void spl_dram_share_info(void) {
 #ifdef SHARED_DDR_INFO
     struct lpddr4_tcm_desc *lpddr4_tcm_desc = (void *) SHARED_DDR_INFO;
@@ -153,12 +193,22 @@ static inline void spl_dram_share_info(void) {
 void spl_dram_init(void)
 {
     int rc=0;
+
     lpddr4_data_get(SPL_TCM_DATA);
+
     rc=_spl_dram_init();
+
+    if (rc==0) {
+        spl_dram_share_info();
+        return;
+    }
+
     lpddr4_data_set(SPL_TCM_DATA);
-    if (rc) {
+
+    if (rc==1) {
         printf("%s Reset ... \n",__func__);
         do_reset_spl();
     }
-    spl_dram_share_info();
+
+    while ( 1 ) { };
 }
diff --git a/board/compulab/plat/imx8mp/ddr/ddr.h b/board/compulab/plat/imx8mp/ddr/ddr.h
index 678b89a529..486771612f 100644
--- a/board/compulab/plat/imx8mp/ddr/ddr.h
+++ b/board/compulab/plat/imx8mp/ddr/ddr.h
@@ -19,7 +19,7 @@ struct lpddr4_tcm_desc {
 	unsigned int size;
 	unsigned int sign;
 	unsigned int index;
-	unsigned int count;
+	unsigned int ddr_init_status;
 };
 
 struct lpddr4_desc {
-- 
2.17.1

