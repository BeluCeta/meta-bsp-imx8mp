From c5d5e3473d1fa18160a1d4b6dfad62956c796608 Mon Sep 17 00:00:00 2001
From: Valentin Raevsky <valentin@compulab.co.il>
Date: Thu, 20 May 2021 14:57:02 +0300
Subject: [PATCH] ar1335: Init iface

Signed-off-by: Valentin Raevsky <valentin@compulab.co.il>
---
 drivers/media/platform/imx8/mxc-mipi-csi2.h       |   1 +
 drivers/media/platform/imx8/mxc-mipi-csi2_yav.c   |  87 ++++++++++++-
 drivers/media/platform/mxc/capture/Kconfig        |   6 +
 drivers/media/platform/mxc/capture/mx6s_capture.c | 149 +++++++++++++++++++++-
 drivers/media/platform/mxc/capture/mxc_mipi_csi.c |  58 +++++++++
 include/media/v4l2-subdev.h                       |   7 +
 6 files changed, 303 insertions(+), 5 deletions(-)

diff --git a/drivers/media/platform/imx8/mxc-mipi-csi2.h b/drivers/media/platform/imx8/mxc-mipi-csi2.h
index cc53325b779c..894761457957 100644
--- a/drivers/media/platform/imx8/mxc-mipi-csi2.h
+++ b/drivers/media/platform/imx8/mxc-mipi-csi2.h
@@ -261,6 +261,7 @@ struct mxc_mipi_csi2_dev {
 	u8 data_lanes[4];
 	u8 vchannel;
 	u8 running;
+	u8 ar1335_mipi;
 };
 
 enum mxc_mipi_csi2_pm_state {
diff --git a/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c b/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
index 090a0c4650d5..545ae4dafe78 100644
--- a/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
+++ b/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
@@ -289,10 +289,69 @@ static int mipi_csi2_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
 
 /*
  * V4L2 subdev operations
+ *
+ * NOTE: The control related ioctls have been introduced as a work around to
+ * support controls. The proper way to support controls is via the control
+ * handler API.
  */
+static int mipi_csi2_querymenu(struct v4l2_subdev *sd, struct v4l2_querymenu *qm)
+{
+	struct mxc_mipi_csi2_dev *csi2dev = sd_to_mxc_mipi_csi2_dev(sd);
+	return v4l2_subdev_call(csi2dev->sensor_sd, core, querymenu, qm);
+}
+
+static int mipi_csi2_queryctrl(struct v4l2_subdev *sd, struct v4l2_queryctrl *qc)
+{
+	struct mxc_mipi_csi2_dev *csi2dev = sd_to_mxc_mipi_csi2_dev(sd);
+	return v4l2_subdev_call(csi2dev->sensor_sd, core, queryctrl, qc);
+}
+
+static int mipi_csi2_g_ctrl(struct v4l2_subdev *sd, struct v4l2_control *ctrl)
+{
+	struct mxc_mipi_csi2_dev *csi2dev = sd_to_mxc_mipi_csi2_dev(sd);
+	return v4l2_subdev_call(csi2dev->sensor_sd, core, g_ctrl, ctrl);
+}
+
+static int mipi_csi2_s_ctrl(struct v4l2_subdev *sd, struct v4l2_control *ctrl)
+{
+	struct mxc_mipi_csi2_dev *csi2dev = sd_to_mxc_mipi_csi2_dev(sd);
+	return v4l2_subdev_call(csi2dev->sensor_sd, core, s_ctrl, ctrl);
+}
+
+static int mipi_csi2_g_ext_ctrls(struct v4l2_subdev *sd, struct v4l2_ext_controls *ctrls)
+{
+	struct mxc_mipi_csi2_dev *csi2dev = sd_to_mxc_mipi_csi2_dev(sd);
+	return v4l2_subdev_call(csi2dev->sensor_sd, core, g_ext_ctrls, ctrls);
+}
+
+static int mipi_csi2_try_ext_ctrls(struct v4l2_subdev *sd, struct v4l2_ext_controls *ctrls)
+{
+	struct mxc_mipi_csi2_dev *csi2dev = sd_to_mxc_mipi_csi2_dev(sd);
+	return v4l2_subdev_call(csi2dev->sensor_sd, core, try_ext_ctrls, ctrls);
+}
+
+static int mipi_csi2_s_ext_ctrls(struct v4l2_subdev *sd, struct v4l2_ext_controls *ctrls)
+{
+	struct mxc_mipi_csi2_dev *csi2dev = sd_to_mxc_mipi_csi2_dev(sd);
+	return v4l2_subdev_call(csi2dev->sensor_sd, core, s_ext_ctrls, ctrls);
+}
+
 static int mipi_csi2_s_power(struct v4l2_subdev *sd, int on)
 {
-	return 0;
+	struct mxc_mipi_csi2_dev *csi2dev = sd_to_mxc_mipi_csi2_dev(sd);
+	struct v4l2_subdev *sensor_sd;
+	int ret = 0;
+
+	sensor_sd = csi2dev->sensor_sd;
+	if (sensor_sd == NULL)
+	{
+		return -EINVAL;
+	}
+
+	if (sensor_sd->ops && v4l2_subdev_has_op(sensor_sd, core, s_power))
+		ret = v4l2_subdev_call(sensor_sd, core, s_power, on);
+
+	return ret;
 }
 
 static int mipi_csi2_s_stream(struct v4l2_subdev *sd, int enable)
@@ -383,11 +442,19 @@ static int mipi_csi2_set_fmt(struct v4l2_subdev *sd,
 	if (fmt->pad)
 		return -EINVAL;
 
-	if (fmt->format.width * fmt->format.height > 720 * 480) {
+	if (csi2dev->ar1335_mipi)
+	{
 		csi2dev->hs_settle = rxhs_settle[1];
-	} else {
-		csi2dev->hs_settle = rxhs_settle[0];
 	}
+	else
+	{
+		if (fmt->format.width * fmt->format.height > 720 * 480) {
+			csi2dev->hs_settle = rxhs_settle[1];
+		} else {
+			csi2dev->hs_settle = rxhs_settle[0];
+		}
+	}
+
 	csi2dev->send_level = 64;
 
 	return v4l2_subdev_call(sensor_sd, pad, set_fmt, NULL, fmt);
@@ -423,6 +490,13 @@ static struct v4l2_subdev_pad_ops mipi_csi2_pad_ops = {
 
 static struct v4l2_subdev_core_ops mipi_csi2_core_ops = {
 	.s_power = mipi_csi2_s_power,
+	.queryctrl = mipi_csi2_queryctrl,
+	.g_ctrl = mipi_csi2_g_ctrl,
+	.s_ctrl = mipi_csi2_s_ctrl,
+	.g_ext_ctrls = mipi_csi2_g_ext_ctrls,
+	.s_ext_ctrls = mipi_csi2_s_ext_ctrls,
+	.try_ext_ctrls = mipi_csi2_try_ext_ctrls,
+	.querymenu = mipi_csi2_querymenu,
 };
 
 static struct v4l2_subdev_video_ops mipi_csi2_video_ops = {
@@ -449,6 +523,11 @@ static int mipi_csi2_parse_dt(struct mxc_mipi_csi2_dev *csi2dev)
 
 	csi2dev->vchannel = of_property_read_bool(node, "virtual-channel");
 
+	/*
+	 * Add a flag to identify the AR1335 device tree
+	 */
+	csi2dev->ar1335_mipi = of_property_read_bool(node, "ar1335-mipi-csi");
+
 	node = of_graph_get_next_endpoint(node, NULL);
 	if (!node) {
 		dev_err(dev, "No port node\n");
diff --git a/drivers/media/platform/mxc/capture/Kconfig b/drivers/media/platform/mxc/capture/Kconfig
index 040f410ff2d4..a5af689ff3fd 100644
--- a/drivers/media/platform/mxc/capture/Kconfig
+++ b/drivers/media/platform/mxc/capture/Kconfig
@@ -61,6 +61,12 @@ config MXC_CAMERA_OV5640_MIPI_V2
 	help
 	  If you plan to use the ov5640 Camera with mipi interface in your MXC system, say Y here.
 
+config MXC_CAMERA_AR1335_MIPI_AF
+	tristate "AR1335 Auto Focus camera support using mipi"
+	depends on MXC_MIPI_CSI && I2C
+	help
+	  If you plan to use the AR1335 camera with MIPI interface in your DART-MX8M board, say Y here.
+
 config MXC_CAMERA_OV5647_MIPI
 	tristate "OmniVision ov5647 camera support using mipi"
 	depends on MXC_MIPI_CSI && I2C
diff --git a/drivers/media/platform/mxc/capture/mx6s_capture.c b/drivers/media/platform/mxc/capture/mx6s_capture.c
index eac5d1e72fa2..b6f09784b05b 100644
--- a/drivers/media/platform/mxc/capture/mx6s_capture.c
+++ b/drivers/media/platform/mxc/capture/mx6s_capture.c
@@ -50,7 +50,11 @@
 #define MX6S_CAM_VERSION "0.0.1"
 #define MX6S_CAM_DRIVER_DESCRIPTION "i.MX6S_CSI"
 
-#define MAX_VIDEO_MEM 64
+/*
+ * Increase the video memory size to 160 so that we
+ * get upto 6 buffers for 13MP.
+ */
+#define MAX_VIDEO_MEM 160
 
 /* reset values */
 #define CSICR1_RESET_VAL	0x40000800
@@ -340,6 +344,7 @@ struct mx6s_csi_dev {
 
 	bool csi_mipi_mode;
 	bool csi_two_8bit_sensor_mode;
+	bool ar1335_csi_bridge;
 	const struct mx6s_csi_soc *soc;
 	struct mx6s_csi_mux csi_mux;
 };
@@ -865,7 +870,20 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 
 		switch (csi_dev->fmt->pixelformat) {
 		case V4L2_PIX_FMT_UYVY:
+			if (csi_dev->ar1335_csi_bridge)
+			{
+				cr18 &= ~BIT_MIPI_DOUBLE_CMPNT;
+				cr18 &= ~BIT_MIPI_YU_SWAP;
+			}
+			cr18 |= BIT_MIPI_DATA_FORMAT_YUV422_8B;
+			break;
 		case V4L2_PIX_FMT_YUYV:
+			if (csi_dev->ar1335_csi_bridge)
+			{
+				cr18 |= BIT_MIPI_DOUBLE_CMPNT;
+
+				cr18 |= BIT_MIPI_YU_SWAP;
+			}
 			cr18 |= BIT_MIPI_DATA_FORMAT_YUV422_8B;
 			break;
 		case V4L2_PIX_FMT_SBGGR8:
@@ -1184,6 +1202,10 @@ static int mx6s_csi_open(struct file *file)
 	if (mutex_lock_interruptible(&csi_dev->lock))
 		return -ERESTARTSYS;
 
+	ret = v4l2_fh_open(file);
+	if (ret || !v4l2_fh_is_singular_file(file)) {
+		goto unlock;
+	}
 	if (csi_dev->open_count++ == 0) {
 		q->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 		q->io_modes = VB2_MMAP | VB2_USERPTR;
@@ -1218,9 +1240,18 @@ static int mx6s_csi_close(struct file *file)
 {
 	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
 	struct v4l2_subdev *sd = csi_dev->sd;
+	int ret, is_singular;
 
 	mutex_lock(&csi_dev->lock);
 
+	is_singular = v4l2_fh_is_singular_file(file);
+	ret = _vb2_fop_release(file, NULL);
+
+	if (!is_singular) {
+		mutex_unlock(&csi_dev->lock);
+		return ret;
+	}
+
 	if (--csi_dev->open_count == 0) {
 		vb2_queue_release(&csi_dev->vb2_vidq);
 
@@ -1269,6 +1300,9 @@ static struct v4l2_file_operations mx6s_csi_fops = {
 static int mx6s_vidioc_enum_input(struct file *file, void *priv,
 				 struct v4l2_input *inp)
 {
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
 	if (inp->index != 0)
 		return -EINVAL;
 
@@ -1276,6 +1310,9 @@ static int mx6s_vidioc_enum_input(struct file *file, void *priv,
 	inp->type = V4L2_INPUT_TYPE_CAMERA;
 	strcpy(inp->name, "Camera");
 
+	if (!v4l2_subdev_has_op(sd, video, s_std))
+		inp->capabilities &= ~V4L2_IN_CAP_STD;
+
 	return 0;
 }
 
@@ -1606,6 +1643,101 @@ static int mx6s_vidioc_s_parm(struct file *file, void *priv,
 	return v4l2_subdev_call(sd, video, s_parm, a);
 }
 
+static int mx6s_vidioc_queryctrl(struct file *file, void *fh,
+					struct v4l2_queryctrl *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, core, queryctrl, a);
+}
+
+static int mx6s_vidioc_query_ext_ctrl(struct file *file, void *fh,
+					struct v4l2_query_ext_ctrl *qec)
+{
+	struct v4l2_queryctrl qc = {
+		.id = qec->id
+	};
+	int ret;
+
+	ret = mx6s_vidioc_queryctrl(file, fh, &qc);
+
+	if (ret)
+		return ret;
+
+	qec->id = qc.id;
+	qec->type = qc.type;
+	strlcpy(qec->name, qc.name, sizeof(qec->name));
+	qec->maximum = qc.maximum;
+	qec->minimum = qc.minimum;
+	qec->step = qc.step;
+	qec->default_value = qc.default_value;
+	qec->flags = qc.flags;
+	qec->elem_size = 4;
+	qec->elems = 1;
+	qec->nr_of_dims = 0;
+	memset(qec->dims, 0, sizeof(qec->dims));
+	memset(qec->reserved, 0, sizeof(qec->reserved));
+
+	return 0;
+}
+
+static int mx6s_vidioc_querymenu(struct file *file, void *fh,
+					struct v4l2_querymenu *qm)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, core, querymenu, qm);
+}
+
+static int mx6s_vidioc_g_ctrl(struct file *file, void *fh,
+					struct v4l2_control *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, core, g_ctrl, a);
+}
+
+static int mx6s_vidioc_s_ctrl(struct file *file, void *fh,
+					struct v4l2_control *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, core, s_ctrl, a);
+}
+
+static int mx6s_vidioc_g_ext_ctrls(struct file *file, void *fh,
+				  struct v4l2_ext_controls *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, core, g_ext_ctrls, a);
+}
+
+static int mx6s_vidioc_try_ext_ctrls(struct file *file, void *fh,
+				  struct v4l2_ext_controls *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, core, try_ext_ctrls, a);
+
+}
+
+static int mx6s_vidioc_s_ext_ctrls(struct file *file, void *fh,
+				  struct v4l2_ext_controls *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, core, s_ext_ctrls, a);
+
+}
+
 static int mx6s_vidioc_enum_framesizes(struct file *file, void *priv,
 					 struct v4l2_frmsizeenum *fsize)
 {
@@ -1699,6 +1831,14 @@ static const struct v4l2_ioctl_ops mx6s_csi_ioctl_ops = {
 	.vidioc_s_parm        = mx6s_vidioc_s_parm,
 	.vidioc_enum_framesizes = mx6s_vidioc_enum_framesizes,
 	.vidioc_enum_frameintervals = mx6s_vidioc_enum_frameintervals,
+	.vidioc_queryctrl     = mx6s_vidioc_queryctrl,
+	.vidioc_query_ext_ctrl = mx6s_vidioc_query_ext_ctrl,
+	.vidioc_querymenu     = mx6s_vidioc_querymenu,
+	.vidioc_g_ctrl        = mx6s_vidioc_g_ctrl,
+	.vidioc_s_ctrl        = mx6s_vidioc_s_ctrl,
+	.vidioc_g_ext_ctrls   = mx6s_vidioc_g_ext_ctrls,
+	.vidioc_s_ext_ctrls   = mx6s_vidioc_s_ext_ctrls,
+	.vidioc_try_ext_ctrls = mx6s_vidioc_try_ext_ctrls
 };
 
 static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
@@ -1890,6 +2030,13 @@ static int mx6s_csi_probe(struct platform_device *pdev)
 	mx6s_csi_mode_sel(csi_dev);
 	mx6s_csi_two_8bit_sensor_mode_sel(csi_dev);
 
+	/*
+	 * Add a flag to identify the AR1335 device tree
+	 */
+	csi_dev->ar1335_csi_bridge =
+		of_property_read_bool(csi_dev->dev->of_node, "ar1335-csi-bridge");
+
+
 	of_id = of_match_node(mx6s_csi_dt_ids, csi_dev->dev->of_node);
 	if (!of_id)
 		return -EINVAL;
diff --git a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
index 069a0b9bb961..63060440a91c 100644
--- a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
+++ b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
@@ -319,6 +319,11 @@ static const struct csis_pix_format mipi_csis_formats[] = {
 		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_YCBCR422_8BIT,
 		.data_alignment = 16,
 	}, {
+		.code = MEDIA_BUS_FMT_UYVY8_2X8,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_YCBCR422_8BIT,
+		.data_alignment = 16,
+
+	}, {
 		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
 		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
 		.data_alignment = 8,
@@ -663,7 +668,53 @@ static void mipi_csis_log_counters(struct csi_state *state, bool non_errors)
 
 /*
  * V4L2 subdev operations
+ *
+ * NOTE: The control related ioctls have been introduced as a work around to
+ * support controls. The proper way to support controls is via the control
+ * handler API.
  */
+static int mipi_csis_querymenu(struct v4l2_subdev *mipi_sd, struct v4l2_querymenu *qm)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	return v4l2_subdev_call(state->sensor_sd, core, querymenu, qm);
+}
+
+static int mipi_csis_queryctrl(struct v4l2_subdev *mipi_sd, struct v4l2_queryctrl *qc)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	return v4l2_subdev_call(state->sensor_sd, core, queryctrl, qc);
+}
+
+static int mipi_csis_g_ctrl(struct v4l2_subdev *mipi_sd, struct v4l2_control *ctrl)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	return v4l2_subdev_call(state->sensor_sd, core, g_ctrl, ctrl);
+}
+
+static int mipi_csis_s_ctrl(struct v4l2_subdev *mipi_sd, struct v4l2_control *ctrl)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	return v4l2_subdev_call(state->sensor_sd, core, s_ctrl, ctrl);
+}
+
+static int mipi_csis_g_ext_ctrls(struct v4l2_subdev *mipi_sd, struct v4l2_ext_controls *ctrls)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	return v4l2_subdev_call(state->sensor_sd, core, g_ext_ctrls, ctrls);
+}
+
+static int mipi_csis_try_ext_ctrls(struct v4l2_subdev *mipi_sd, struct v4l2_ext_controls *ctrls)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	return v4l2_subdev_call(state->sensor_sd, core, try_ext_ctrls, ctrls);
+}
+
+static int mipi_csis_s_ext_ctrls(struct v4l2_subdev *mipi_sd, struct v4l2_ext_controls *ctrls)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	return v4l2_subdev_call(state->sensor_sd, core, s_ext_ctrls, ctrls);
+}
+
 static int mipi_csis_s_power(struct v4l2_subdev *mipi_sd, int on)
 {
 	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
@@ -855,6 +906,13 @@ static int mipi_csis_log_status(struct v4l2_subdev *mipi_sd)
 
 static struct v4l2_subdev_core_ops mipi_csis_core_ops = {
 	.s_power = mipi_csis_s_power,
+	.queryctrl = mipi_csis_queryctrl,
+	.g_ctrl = mipi_csis_g_ctrl,
+	.s_ctrl = mipi_csis_s_ctrl,
+	.g_ext_ctrls = mipi_csis_g_ext_ctrls,
+	.s_ext_ctrls = mipi_csis_s_ext_ctrls,
+	.try_ext_ctrls = mipi_csis_try_ext_ctrls,
+	.querymenu = mipi_csis_querymenu,
 	.log_status = mipi_csis_log_status,
 };
 
diff --git a/include/media/v4l2-subdev.h b/include/media/v4l2-subdev.h
index e9aeda38d307..ca12c522d748 100644
--- a/include/media/v4l2-subdev.h
+++ b/include/media/v4l2-subdev.h
@@ -195,6 +195,13 @@ struct v4l2_subdev_core_ops {
 	int (*load_fw)(struct v4l2_subdev *sd);
 	int (*reset)(struct v4l2_subdev *sd, u32 val);
 	int (*s_gpio)(struct v4l2_subdev *sd, u32 val);
+	int (*queryctrl)(struct v4l2_subdev *sd, struct v4l2_queryctrl *qc);
+	int (*g_ctrl)(struct v4l2_subdev *sd, struct v4l2_control *ctrl);
+	int (*s_ctrl)(struct v4l2_subdev *sd, struct v4l2_control *ctrl);
+	int (*querymenu)(struct v4l2_subdev *sd, struct v4l2_querymenu *qm);
+	int (*g_ext_ctrls)(struct v4l2_subdev *sd, struct v4l2_ext_controls *ctrls);
+	int (*s_ext_ctrls)(struct v4l2_subdev *sd, struct v4l2_ext_controls *ctrls);
+	int (*try_ext_ctrls)(struct v4l2_subdev *sd, struct v4l2_ext_controls *ctrls);
 	long (*ioctl)(struct v4l2_subdev *sd, unsigned int cmd, void *arg);
 #ifdef CONFIG_COMPAT
 	long (*compat_ioctl32)(struct v4l2_subdev *sd, unsigned int cmd,
-- 
2.11.0

