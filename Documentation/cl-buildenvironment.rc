# Debian

debian_packages='git pv xz-utils device-tree-compiler python3-pip python3-pyelftools'
debian_packages_error_exit() {
cat << eof
Make sure that all required deb packages are installed; Issue:
sudo apt-get update
sudo apt-get install ${debian_packages}

Bye ...
eof
exit 1
}
dpkg -l ${debian_packages} >/dev/null || debian_packages_error_exit

# Python
python_packages='pycryptodomex'
python_packages_error_exit() {
cat << eof
Please install the ${missed_package}; Issue:
pip3 install ${missed_package}

Bye ...
eof
exit 2
}
for _p in ${python_packages};do
pip3 list | grep ${_p} &>/dev/null || missed_package=${_p} python_packages_error_exit
done

# Everything is okay let's continue

get_aarch64_cross() {
    local WGET_DIR="/tmp"
    local AARCH64_CROSS_FILE=$(printf ${AARCH64_CROSS_URL} | awk -F"/"  '$0=$NF')
    local WGET="wget --continue --no-clobber --directory-prefix=${WGET_DIR} "
    [[ -e ${CROSS_COMPILE}gcc ]] && return 0
    ${WGET} ${AARCH64_CROSS_URL}
    mkdir -p ${USER_APP_DIR}
    pv ${WGET_DIR}/${AARCH64_CROSS_FILE} | xz -dc - | tar -C ${USER_APP_DIR} -xf -
    #tar -C ${USER_APP_DIR} -xf ${WGET_DIR}/${AARCH64_CROSS_FILE}
}

get_compatible_machine() {
local machines="ucm-imx8m-plus som-imx8m-plus"
PS3="Select a machine: ? "
select _m in ${machines}
do
case $i in
	*)
	export MACHINE=${_m}
	break
	;;
	esac
done
}

setup_dirs() {
    mkdir -p imx8mp/{sources,results}
    export SRC_ROOT=$(readlink -f imx8mp/sources)
    export RESULTS=$(readlink -f imx8mp/results)
    cd ${SRC_ROOT}
}

get_compulab_metalayer() {
    export LAYER_DIR=$(pwd)/meta-bsp-imx8mp
    if [[ ! -d ${LAYER_DIR} ]];then
    	git clone -b ${CPL_BRANCH} https://github.com/compulab-yokneam/meta-bsp-imx8mp.git
    else
        git -C ${LAYER_DIR} remote update
        git -C ${LAYER_DIR} pull
        export SRC_UPDATE=1
    fi
}

export firmware_files='lpddr4_pmu_train_1d_dmem.bin lpddr4_pmu_train_1d_imem.bin lpddr4_pmu_train_2d_dmem.bin lpddr4_pmu_train_2d_imem.bin'
get_nxp_firmware() {
    local NXP_FIRMWARE_DIR=$(printf ${NXP_FIRMWARE} | awk -F".bin" '$0=$1')
    [[ -f ${NXP_FIRMWARE} ]] || wget --continue --no-clobber http://www.freescale.com/lgfiles/NMG/MAD/YOCTO/${NXP_FIRMWARE}
    [[ -d ${NXP_FIRMWARE_DIR} ]] || bash ${NXP_FIRMWARE} --auto-accept
# copy files if needed
for _f in ${firmware_files};do
    [[ ! -f ${RESULTS}/${_f} ]] && ( cp -$(find firmware* | awk '/train|hdmi_imx8|dp_imx8/' ORS=" ") ${RESULTS} ; break )
done
}

_get_nxp_source() {
    [[ -d ${NXP_SOURCE} ]] || git clone https://source.codeaurora.org/external/imx/${NXP_SOURCE}
    [[ ${SRC_UPDATE} = '1' ]] && ( git -C ${NXP_SOURCE} checkout ${NXP_BRANCH}; git -C ${NXP_SOURCE} branch -D ${CPL_BRANCH} 2>/dev/null )
    git -C ${NXP_SOURCE} checkout ${CPL_BRANCH} 2>/dev/null || {
        git -C ${NXP_SOURCE} checkout ${NXP_BRANCH} -b ${CPL_BRANCH} 2>/dev/null && git -C ${NXP_SOURCE} am ${LAYER_DIR}/${CPL_PATCH}/*.patch
    }
}

get_nxp_atf() {

    NXP_SOURCE=${NXP_ATF} NXP_BRANCH=${NXP_ATF_BRANCH} CPL_PATCH="recipes-bsp/${NXP_ATF}/compulab/imx8mp" _get_nxp_source

    make -j 16 -C ${NXP_ATF} PLAT=imx8mp BUILD_BASE=build-optee SPD=opteed bl31
    ln -fs $(readlink -f ${NXP_ATF}/build-optee/imx8mp/release/bl31.bin) ${RESULTS}/bl31.bin
}

get_nxp_optee() {

    NXP_SOURCE=${NXP_OPTEE} NXP_BRANCH=${NXP_OPTEE_BRANCH} CPL_PATCH='recipes-security/optee-imx/compulab/imx8mp' _get_nxp_source

    export ARCH=arm CROSS_COMPILE64=${CROSS_COMPILE}
    make -j 16 -C ${NXP_OPTEE} PLATFORM=imx PLATFORM_FLAVOR=mx8mpevk CFG_WERROR=y \
      CFG_TEE_CORE_LOG_LEVEL=0 CFG_TEE_TA_LOG_LEVEL=0 CFG_DDR_SIZE=0x200000000ULL
    ln -fs $(readlink -f ${NXP_OPTEE}/out/arm-plat-imx/core/tee-raw.bin) ${RESULTS}/tee.bin
}

get_nxp_bootloader() {
    local NXP_FLASH=${1:-flash.bin}

    NXP_SOURCE=${NXP_UBOOT} NXP_BRANCH=${NXP_UBOOT_BRANCH} CPL_PATCH='recipes-bsp/u-boot/compulab/imx8mp' _get_nxp_source

    export ARCH=arm64
    make -j 16 -C ${NXP_UBOOT} O=${RESULTS} ${MACHINE}_defconfig
    make -j 16 -C ${NXP_UBOOT} O=${RESULTS} ${NXP_FLASH}
    cp ${RESULTS}/${NXP_FLASH} ${RESULTS}/${MACHINE}-${NXP_FLASH}

}

clean_all() {
    rm -rf ${RESULTS}
    mkdir -p ${RESULTS}
}

build_all() {
    get_compulab_metalayer
    get_nxp_firmware
    get_nxp_atf
    get_nxp_optee
    get_nxp_bootloader
    export SRC_UPDATE=0
}

build_uui() {
if [ ! -f ${RESULTS}/flash.bin ];then
cat << eof
    Issue: get_nxp_bootloader first"
eof
return
fi
[ -d uui ] || git clone https://github.com/compulab-yokneam/uui.git
ln -fs ${RESULTS}/flash.bin uui/mx8mp/bootloader
cd uui
make PLAT=mx8mp
cd -
cp -v uui/mx8mp/uui.img ${RESULTS}/
}

flist='get_compatible_machine
    get_compulab_metalayer
    get_nxp_firmware
    get_nxp_atf
    get_nxp_optee
    get_nxp_bootloader
    build_all
    build_uui
    clean_all
    exit'

usage () {
local index=0
cat << eof

Available functions:
eof
for _f in ${flist};do
cat << eof
[${index}] - ${_f}
eof
((index++))
done
}

# declare aliases
index=0
for _f in ${flist};do
alias ${index}=${_f}
((index++))
done

export bins="bl31.bin tee.bin flash.bin uui.img"

status() {
local status=""
for _b in ${bins};do
status+=${_b}
[[ -f ${RESULTS}/${_b} ]] && status+="[x]; " || status+="[-]; " 
done
cat << eof
${status}
eof
}

get_aarch64_cross
setup_dirs
get_compulab_metalayer
get_compatible_machine

export SRC_UPDATE=0
PS1='$(usage)\n\ncl-buildenvironment [ MACHINE=${MACHINE}; CROSS_COMPILE=${CROSS_COMPILE} ]\n\n$(status) > '
