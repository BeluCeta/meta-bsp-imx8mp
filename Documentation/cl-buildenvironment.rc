get_aarch64_cross() {
    local WGET_DIR="/tmp"
    local AARCH64_CROSS_FILE=$(printf ${AARCH64_CROSS_URL} | awk -F"/"  '$0=$NF')
    local WGET="wget --continue --no-clobber --directory-prefix=${WGET_DIR} "
    [[ -e ${CROSS_COMPILE}gcc ]] && return 0
    ${WGET} ${AARCH64_CROSS_URL}
    mkdir -p ${USER_APP_DIR}
    pv ${WGET_DIR}/${AARCH64_CROSS_FILE} | xz -dc - | tar -C ${USER_APP_DIR} -xf -
    #tar -C ${USER_APP_DIR} -xf ${WGET_DIR}/${AARCH64_CROSS_FILE}
}

get_compatible_machine_signal() {
    exit 0
}

get_compatible_machine_exit="<<"

get_compatible_machine() {
set -o posix
[[ -n ${1} ]] && trap get_compatible_machine_signal INT
local machines=${CPL_MACHINES}" ${1}"
PS3="Select a machine: ? "
select _m in ${machines}
do
case $i in
	*)
	export MACHINE=${_m}
	break
	;;
	esac
done
trap - INT
[[ ${MACHINE} = ${get_compatible_machine_exit} ]] && exit 0
set +o posix
}

CPL_DRAMS="D1D8 D2D4"
export DRAM="D1D8"
get_dram_config() {
set -o posix
[[ -n ${1} ]] && trap get_compatible_machine_signal INT
local dram_configs=${CPL_DRAMS}" ${1}"
PS3="Select a dram config: ? "
select _dram in ${dram_configs}
do
case $i in
	*)
	DRAM=${_dram}
	break
	;;
	esac
done
trap - INT
[[ ${MACHINE} = ${get_compatible_machine_exit} ]] && exit 0
set +o posix
}

setup_dirs() {
    mkdir -p ${NXP_PLATFORM}/{sources,results}
    export SRC_ROOT=$(readlink -f ${NXP_PLATFORM}/sources)
    export RESULTS=$(readlink -f ${NXP_PLATFORM}/results)
    export KERNEL_BUILD=${RESULTS}/kernel/build
    export KERNEL_INSTALL=${RESULTS}/kernel/install
    export LOCAL_PDIR=${SRC_ROOT}/p
    cd ${SRC_ROOT}
}

get_compulab_metalayer() {
    export LAYER_DIR=$(pwd)/meta-bsp-${NXP_PLATFORM}
    if [[ ! -d ${LAYER_DIR} ]];then
        git clone -b ${CPL_META_BRANCH} ${CPL_META_LAYER} ${LAYER_DIR}
    else
        git -C ${LAYER_DIR} remote update
        git -C ${LAYER_DIR} pull
        export SRC_UPDATE=1
    fi
}

get_git_repo() {
set -o posix
	[[ -n ${1} ]] && trap get_compatible_machine_signal INT
	local gitrepo_list=${SRC_GIT_REPO_LIST}" ${1}"
	PS3="Select git repository: ? "
	select _gitrepo in ${gitrepo_list}
	do
		case $i in
		*)
			SRC_GIT_REPO_NAME=${_gitrepo}
			break
			;;
		esac
	done
	trap - INT
	[[ ${MACHINE} = ${get_compatible_machine_exit} ]] && exit 0
set +o posix
}

export firmware_files='lpddr4_pmu_train_1d_dmem.bin lpddr4_pmu_train_1d_imem.bin lpddr4_pmu_train_2d_dmem.bin lpddr4_pmu_train_2d_imem.bin'
get_nxp_firmware() {
    local NXP_FIRMWARE_DIR=$(printf ${NXP_FIRMWARE} | awk -F".bin" '$0=$1')
    [[ -f ${NXP_FIRMWARE} ]] || wget --continue --no-clobber http://www.freescale.com/lgfiles/NMG/MAD/YOCTO/${NXP_FIRMWARE}
    [[ -d ${NXP_FIRMWARE_DIR} ]] || bash ${NXP_FIRMWARE} --auto-accept
# copy files if needed
for _f in ${firmware_files};do
    [[ ! -f ${RESULTS}/${_f} ]] && ( cp $(find firmware* | awk '/train|hdmi_imx8|dp_imx8/' ORS=" ") ${RESULTS} ; break )
done
}

_get_nxp_source() {
    export SRC_GIT_REPO=${SRC_GIT_REPO_NAME}_GIT
    [[ -d ${NXP_SOURCE} ]] || (echo ${!SRC_GIT_REPO}/${NXP_SOURCE}; git clone ${!SRC_GIT_REPO}/${NXP_SOURCE})
    [[ ${SRC_UPDATE} = '1' ]] && ( git -C ${NXP_SOURCE} checkout ${NXP_BRANCH} 2>/dev/null; git -C ${NXP_SOURCE} branch -D ${CPL_BRANCH} 2>/dev/null )
    git -C ${NXP_SOURCE} checkout ${CPL_BRANCH} 2>/dev/null || {
        git -C ${NXP_SOURCE} checkout ${NXP_BRANCH} -b ${CPL_BRANCH} 2>/dev/null
        [[ -d ${LAYER_DIR}/${CPL_PATCH} ]] && git -C ${NXP_SOURCE} am ${LAYER_DIR}/${CPL_PATCH}/*.patch
        [[ -d ${LOCAL_PDIR}/${NXP_SOURCE} ]] && git -C ${NXP_SOURCE} am ${LOCAL_PDIR}/${NXP_SOURCE}/*.patch
    }
}

get_nxp_atf() {

    NXP_SOURCE=${NXP_ATF} NXP_BRANCH=${NXP_ATF_BRANCH} CPL_PATCH=${CPL_ATF_PATCH} _get_nxp_source

    ATF_MAKE_CMD="make -j 16 -C ${NXP_ATF} PLAT=${NXP_PLATFORM} BUILD_BASE=build-optee SPD=opteed IMX_BOOT_UART_BASE=${IMX_BOOT_UART_BASE} bl31"
    echo ${ATF_MAKE_CMD} > ${RESULTS}/bl31.cmd
    ${ATF_MAKE_CMD}
    ln -fs $(readlink -f ${NXP_ATF}/build-optee/${NXP_PLATFORM}/release/bl31.bin) ${RESULTS}/bl31.bin
}

clean_nxp_atf() {
    rm -rf ${NXP_ATF}/build-optee
}

get_nxp_optee() {
    local optee_flavor=${NXP_PLATFORM:1}evk

    NXP_SOURCE=${NXP_OPTEE} NXP_BRANCH=${NXP_OPTEE_BRANCH} CPL_PATCH=${CPL_OPTEE_PATCH} _get_nxp_source

    export ARCH=arm CROSS_COMPILE64=${CROSS_COMPILE}
    OPTEE_MAKE_CMD="make -j 16 -C ${NXP_OPTEE} PLATFORM=imx PLATFORM_FLAVOR=${optee_flavor} CFG_WERROR=y \
      CFG_TEE_CORE_LOG_LEVEL=0 CFG_TEE_TA_LOG_LEVEL=0 CFG_DDR_SIZE=0x200000000ULL CFG_UART_BASE=${CFG_UART_BASE}"
    echo ${OPTEE_MAKE_CMD} > ${RESULTS}/tee.cmd
    ${OPTEE_MAKE_CMD}

    ln -fs $(readlink -f ${NXP_OPTEE}/out/arm-plat-imx/core/tee-raw.bin) ${RESULTS}/tee.bin
}

clean_nxp_optee() {
    rm -rf ${NXP_OPTEE}/out
}

get_nxp_bootloader() {
    local NXP_FLASH=${1:-flash.bin}

    NXP_SOURCE=${NXP_UBOOT} NXP_BRANCH=${NXP_UBOOT_BRANCH} CPL_PATCH=${CPL_UBOOT_PATCH} _get_nxp_source
    local tag="build_tag_$(date +%s)"
    git -C ${NXP_UBOOT} tag -a -m "Build tag message ${tag}" "v${tag}"

    export ARCH=arm64
    make -j 16 -C ${NXP_UBOOT} O=${RESULTS} ${MACHINE}_defconfig

    # Clean up the conf fragment
    rm -rf ${RESULTS}/cfg.cfg

    [[ ${CPL_DEBUG_UART} == 1 ]] && {
        CFG_LINE="CONFIG_COMPULAB_DEBUG_UART1=y"
    } || {
        CFG_LINE="# CONFIG_COMPULAB_DEBUG_UART1 is not set"
    }
cat << eof >> ${RESULTS}/cfg.cfg
${CFG_LINE}
eof

    # dram configurations
    [[ ${DRAM} == "D2D4" ]] && {
        CFG_LINE="CONFIG_DRAM_D2D4=y"
        DRAM_CFG=d2d4
    } || {
        CFG_LINE="# CONFIG_DRAM_D2D4 is not set"
        DRAM_CFG=d1d8
    }
cat << eof >> ${RESULTS}/cfg.cfg
${CFG_LINE}
eof

    # Enable fit generator
cat << eof >> ${RESULTS}/cfg.cfg
CONFIG_USE_SPL_FIT_GENERATOR=y
CONFIG_SPL_FIT_GENERATOR="arch/arm/mach-imx/mkimage_fit_atf.sh"
eof

cat << eof >> ${RESULTS}/cfg.cfg
CONFIG_LOCALVERSION="${COMPULAB_VERSION}"
eof

    pushd ${NXP_UBOOT}
    KCONFIG_CONFIG=${RESULTS}/.config  ./scripts/kconfig/merge_config.sh -m ${RESULTS}/.config ${RESULTS}/cfg.cfg
    popd

    make -j 16 -C ${NXP_UBOOT} O=${RESULTS} ${NXP_FLASH}
    cp ${RESULTS}/${NXP_FLASH} ${RESULTS}/${MACHINE}-${NXP_FLASH}-${DRAM_CFG}
    ln -fs ${MACHINE}-${NXP_FLASH}-${DRAM_CFG} ${RESULTS}/${MACHINE}-${NXP_FLASH}
}

_KERNEL_BUILD=${RESULTS}/kernel/build
_KERNEL_INSTALL=${RESULTS}/kernel/install

_nxp_kernel_pre() {
    mkdir -p ${KERNEL_BUILD} ${KERNEL_INSTALL}
}

_nxp_kernel_add() {

    KERNEL_RELEASE=$(awk ''1 ${KERNEL_BUILD}/include/config/kernel.release)

    export INSTALL_MOD_PATH=${KERNEL_INSTALL}
    mkdir -p ${KERNEL_INSTALL}/lib/modules
    mkdir -p ${KERNEL_INSTALL}/boot
    make -C ${NXP_KERNEL} modules_install O=${KERNEL_BUILD}

    # Copy linux images' files
    for _file in ${KERNEL_BUILD}/arch/arm64/boot/Image*;do
        [[ -f ${_file} ]] && cp -v ${_file} ${KERNEL_INSTALL}/boot/
    done

    # Copy dtbs' files
    for _file in ${KERNEL_BUILD}/arch/arm64/boot/dts/compulab/*.dtb;do
        [[ -f ${_file} ]] && cp -v ${_file} ${KERNEL_INSTALL}/boot/
    done

    for _file in build source;do
        _file=${KERNEL_INSTALL}/lib/modules/${KERNEL_RELEASE}/${_file}
        [[ -e ${_file} ]] && unlink ${_file}
    done

}

_nxp_kernel_tar() {

    time_stamp=$(date +%Y_%m_%d-%H_%M_%S)
    KERNEL_RELEASE=$(awk ''1 ${KERNEL_BUILD}/include/config/kernel.release)
    export KERNEL_IMAGE_TAR=${RESULTS}/linux-image-${KERNEL_RELEASE}-${time_stamp}.tar.bz2
    fakeroot tar -C ${KERNEL_INSTALL} -cjvf ${KERNEL_IMAGE_TAR} .

}

_nxp_kernel_tar_stat() {
    export KERNEL_IMAGE_TAR=$(ls -tr ${RESULTS}/*${KERNEL_RELEASE}* | awk '{ f=$0 } END { print f }')
}

get_nxp_kernel_tar() {

    [[ ! -f ${KERNEL_INSTALL}/boot/Image ]] || _nxp_kernel_tar

}

get_nxp_kernel() {

    _nxp_kernel_pre

    NXP_SOURCE=${NXP_KERNEL} NXP_BRANCH=${NXP_KERNEL_BRANCH} CPL_PATCH=${CPL_KERNEL_PATCH} _get_nxp_source

    export ARCH=arm64
    make -j 16 -C ${NXP_KERNEL} O=${KERNEL_BUILD} ${MACHINE}_defconfig
    make -j 16 -C ${NXP_KERNEL} O=${KERNEL_BUILD}

    _nxp_kernel_add
}

clean_all() {
    clean_nxp_atf
    clean_nxp_optee
    rm -rf ${RESULTS}
    mkdir -p ${RESULTS}
}

get_compulab_bootloader() {
    build_all
}

build_all() {
    get_compulab_metalayer
    get_nxp_firmware
    get_nxp_atf
    get_nxp_optee
    get_nxp_bootloader
    export SRC_UPDATE=0
}

get_compulab_bootloader() {
    build_all
}

build_uui() {
local uui_plat=${NXP_PLATFORM:1}
if [ ! -f ${RESULTS}/flash.bin ];then
cat << eof
    Issue: get_nxp_bootloader first"
eof
return
fi
[ -d uui ] || git clone https://github.com/compulab-yokneam/uui.git
ln -fs ${RESULTS}/flash.bin uui/${uui_plat}/bootloader
cd uui
make PLAT=${uui_plat}
cd -
mv uui/${uui_plat}/uui.img ${RESULTS}/${MACHINE}-uui.img
}

flist='get_compatible_machine
    get_dram_config
    get_git_repo
    get_compulab_bootloader
    clean_all
    exit'

devel_flist='get_compatible_machine
    get_dram_config
    get_git_repo
    get_compulab_metalayer
    get_nxp_firmware
    get_nxp_atf
    get_nxp_optee
    get_nxp_bootloader
    build_all
    build_uui
    clean_all
    exit'

[[ -n ${DEVEL_MODE} ]] && flist=${devel_flist}

kernel_flist='get_compatible_machine
    get_compulab_metalayer
    get_git_repo
    get_nxp_kernel
    get_nxp_kernel_tar
    exit'

[[ -n ${KERNEL} ]] && flist=${kernel_flist}

usage () {
local index=0
cat << eof

Available functions:
eof
for _f in ${flist};do
cat << eof
[${index}] - ${_f}
eof
((index++))
done
}

# declare aliases
index=0
for _f in ${flist};do
alias ${index}=${_f}
((index++))
done

uboot_status() {
local status="Bootloader build status: "
local bins=""
[[ -n ${DEVEL_MODE} ]] && bins+="bl31.bin tee.bin "
bins+="${MACHINE}-flash.bin "
[[ -n ${DEVEL_MODE} ]] && bins+="${MACHINE}-uui.img "
for _b in ${bins};do
status+=${_b}
[[ -f ${RESULTS}/${_b} ]] && status+="[x]; " || status+="[-]; "
done
cat << eof
${status}
eof
}

kernel_status() {

[[ -f ${KERNEL_BUILD}/include/config/kernel.release ]] && KERNEL_RELEASE=$(awk ''1 ${KERNEL_BUILD}/include/config/kernel.release)
export KERNEL_RELEASE=${KERNEL_RELEASE:-"?"}

_nxp_kernel_tar_stat

local status="Kernel [${KERNEL_RELEASE}] build status: "
local bins="${KERNEL_INSTALL}/boot/Image ${KERNEL_IMAGE_TAR}"
for _b in ${bins};do
status+=$(basename ${_b})
[[ -f ${_b} ]] && status+="[x]; " || status+="[-]; "
done
cat << eof
${status}
eof
}

status() {
[[ -n ${KERNEL} ]] && kernel_status || uboot_status
}

get_aarch64_cross
setup_dirs
get_compulab_metalayer
get_compatible_machine ${get_compatible_machine_exit}

export SRC_UPDATE=0
PS1='$(usage)\n\ncl-buildenvironment [ MACHINE=${MACHINE}; DEBUG_UART=${CPL_DEBUG_UART}; DRAM=${DRAM}; CROSS_COMPILE=${CROSS_COMPILE} GIT_REPO=${SRC_GIT_REPO_NAME}]\n\n$(status) > '
